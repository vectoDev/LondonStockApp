// <auto-generated />
using System;
using LondonStock.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LondonStock.Infrastructure.Migrations
{
    [DbContext(typeof(LondonStockDbContext))]
    [Migration("20250812113549_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LondonStock.Domain.Entities.LoginToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginTokens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ExpiresAt = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            TokenHash = "$2a$11$VcEJujMbM1p09ZzqEGFGKuBvQhGuAcdAoBzUJeOwvJ8z7x4g.8Q4m",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ExpiresAt = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            TokenHash = "$2a$11$dl2kF7IoZzPl5GqZV3JbOehY8DJqF4NQ5dw2EHVVbP1hZrs0aKnD2",
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("GBP");

                    b.Property<string>("TickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalUnits")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CompanyName = "Barclays PLC",
                            Currency = "GBP",
                            TickerSymbol = "BARC",
                            TotalUnits = 50000m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CompanyName = "HSBC Holdings PLC",
                            Currency = "GBP",
                            TickerSymbol = "HSBA",
                            TotalUnits = 80000m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CompanyName = "BP PLC",
                            Currency = "GBP",
                            TickerSymbol = "BP",
                            TotalUnits = 65000m,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("GBP");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StockId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("StockId");

                    b.HasIndex("StockId1");

                    b.HasIndex("UserId");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            BrokerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "GBP",
                            Price = 150.25m,
                            Quantity = 100m,
                            StockId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            BrokerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Currency = "GBP",
                            Price = 450.75m,
                            Quantity = 50m,
                            StockId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TransactionType = 2
                        });
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$HtCGhcfwCsBlks4SOQGlB.IcPBSM4hz6fqeUKrEFHL52dA.sDRkzC",
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$AVcQ/Aq7BgXHvHG45paOTOV.0TKpL.vJTyxfDqb2bdp7dRuQJ1.lC",
                            RoleId = 2,
                            Username = "broker1"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$AVcQ/Aq7BgXHvHG45paOTOV.0TKpL.vJTyxfDqb2bdp7dRuQJ1.lC",
                            RoleId = 2,
                            Username = "broker2"
                        });
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.LoginToken", b =>
                {
                    b.HasOne("LondonStock.Domain.Entities.User", "User")
                        .WithMany("LoginTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.Trade", b =>
                {
                    b.HasOne("LondonStock.Domain.Entities.User", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LondonStock.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LondonStock.Domain.Entities.Stock", null)
                        .WithMany("Trades")
                        .HasForeignKey("StockId1");

                    b.HasOne("LondonStock.Domain.Entities.User", null)
                        .WithMany("Trades")
                        .HasForeignKey("UserId");

                    b.Navigation("Broker");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.Stock", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("LondonStock.Domain.Entities.User", b =>
                {
                    b.Navigation("LoginTokens");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
